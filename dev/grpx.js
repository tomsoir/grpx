// Generated by CoffeeScript 1.8.0
(function() {
  (function(root, factory) {
    if (typeof exports === 'object') {
      factory(exports, require('jQuery'));
    } else if (typeof define === 'function' && define.amd) {
      define(['exports', 'jQuery'], factory);
    } else {
      factory(window, $);
    }
  })(this, function(exports, $) {
    var GRPX;
    return exports.GRPX = GRPX = (function() {
      GRPX.prototype.config = {
        desc: void 0,
        sect: void 0,
        masterApi: 'api.correctprice.ru',
        backupApi: 'api2.correctprice.ru',
        developApi: 'api-dev.correctprice.ru'
      };

      function GRPX(options) {
        this._applyOptions(options);
        this._requiresReady();
      }

      GRPX.prototype._getProtocol = function() {
        if (window.location.protocol !== "https:") {
          return 'http://';
        } else {
          return 'https://';
        }
      };

      GRPX.prototype._applyOptions = function(options) {
        if (options != null ? options.dev : void 0) {
          return this.config.masterApi = this.config.developApi;
        }
      };

      GRPX.prototype._sendRequest = function(service, oParams) {
        var param, state;
        state = $.Deferred();
        param = !oParams ? '' : '1';
        $.ajax({
          url: this._getProtocol() + this.config.masterApi + '/' + service + '?' + param + 'jsoncallback=?',
          dataType: "json",
          timeout: 3000,
          success: (function(_this) {
            return function(data) {
              return state.resolve(data);
            };
          })(this),
          error: (function(_this) {
            return function() {
              _this.config.masterApi = _this.config.backupApi;
              return _this._requiresReady();
            };
          })(this)
        });
        return state;
      };

      GRPX.prototype._requiresReady = function() {
        return $((function(_this) {
          return function() {
            var check, state;
            state = $.Deferred();
            if (!(_this.config.desc || _this.config.sect)) {
              check = function() {
                if (_this.config.desc && _this.config.sect) {
                  return state.resolve();
                }
              };
              _this._sendRequest('get_opt_desc').done(function(data) {
                _this.config.desc = data;
                return check();
              });
              _this._sendRequest('get_opt_sect').done(function(data) {
                _this.config.sect = data;
                return check();
              });
            } else {
              state.resolve();
            }
            return state;
          };
        })(this));
      };

      GRPX.prototype.unpack = function(oGRP) {
        var allGroupsTitle, compls, currentGroupName, opt_desc, opt_sect, opt_sect_rev;
        opt_desc = this.config.desc;
        opt_sect = this.config.sect;
        compls = oGRP;
        opt_sect_rev = {};
        allGroupsTitle = [];
        currentGroupName = '';
        $(opt_sect).each(function(ind, el) {
          var flagExist, item, _i, _len;
          opt_sect_rev[el.catg] = el.sect;
          if (currentGroupName !== el.sect) {
            currentGroupName = el.sect;
            flagExist = false;
            for (_i = 0, _len = allGroupsTitle.length; _i < _len; _i++) {
              item = allGroupsTitle[_i];
              if (item === currentGroupName) {
                flagExist = true;
              }
            }
            if (!flagExist) {
              return allGroupsTitle.push(currentGroupName);
            }
          }
        });
        $(compls).each(function(ind2, el2) {
          el2.options = {};
          return $(opt_desc).each(function(ind3, el3) {
            var ofs, s, sect;
            s = el2["grp" + el3.grp];
            ofs = Math.ceil(s.length - el3.pos / 4 - 1);
            if (parseInt("0x" + s.substring(ofs, ofs + 1)) & Math.pow(2, el3.pos % 4)) {
              sect = opt_sect_rev[el3.catg];
              if (el2.options[sect] === undefined) {
                el2.options[sect] = {};
              }
              if (el2.options[sect][el3.catg] === undefined) {
                return el2.options[sect][el3.catg] = el3.name;
              } else if (el2.options[sect][el3.catg] instanceof Array) {
                return el2.options[sect][el3.catg].push(el3.name);
              } else {
                return el2.options[sect][el3.catg] = [el2.options[sect][el3.catg], el3.name];
              }
            }
          });
        });
        return compls.options;
      };

      GRPX.prototype.pack = function(oParams) {
        var grps, oFinalPackData, opt_desc, opt_sect, returnStr, simplify;
        opt_desc = this.config.desc;
        opt_sect = this.config.sect;
        oFinalPackData = {};
        grps = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]];
        $(opt_desc).each(function(ind, el) {
          if (typeof oParams[el.catg] !== "undefined" && oParams[el.catg] === el.name) {
            return grps[el.grp][(el.pos > 31 ? 1 : 0)] += Math.pow(2, (el.pos > 31 ? el.pos - 32 : el.pos));
          }
        });
        simplify = function(str) {
          while (str.length > 1 && str.substr(0, 1) === "0") {
            str = str.substr(1);
          }
          return str;
        };
        $(grps).each(function(ind, el) {
          el[1] = simplify(el[1].toString(16) + ("00000000" + el[0].toString(16)).substr(-8));
          return el[0] = "grp" + ind;
        });
        returnStr = 'grp0=' + grps[0][1] + '&grp1=' + grps[1][1] + '&grp2=' + grps[2][1] + '&grp3=' + grps[3][1] + '&grp4=' + grps[4][1] + '&grp5=' + grps[5][1] + '&grp6=' + grps[6][1] + '&grp7=' + grps[7][1];
        oFinalPackData['url'] = returnStr;
        oFinalPackData['obj'] = {
          'grp0': grps[0][1],
          'grp1': grps[1][1],
          'grp2': grps[2][1],
          'grp3': grps[3][1],
          'grp4': grps[4][1],
          'grp5': grps[5][1],
          'grp6': grps[6][1],
          'grp7': grps[7][1]
        };
        return oFinalPackData;
      };

      GRPX.prototype.unpackToDefault = function(oGRP) {
        var defaultOpt, groupName, optName, resultOpt;
        resultOpt = {};
        defaultOpt = this.unpack(oGRP);
        for (groupName in defaultOpt) {
          for (optName in defaultOpt[groupName]) {
            resultOpt[optName] = defaultOpt[groupName][optName][0];
          }
        }
        return resultOpt;
      };

      GRPX.prototype.extendIncomingToDefault = function(defaultUnpackOpts, incomingUnpackOpts) {
        var optName;
        for (optName in incomingUnpackOpts) {
          if (defaultUnpackOpts[optName]) {
            defaultUnpackOpts[optName] = incomingUnpackOpts[optName];
          } else {
            console.error("Can't find param with name: " + optName);
          }
        }
        return defaultUnpackOpts;
      };

      GRPX.prototype.packWithDefault = function(oIncomingOpt, oGRP) {
        var defaultOpts, grpx, resultOpts;
        defaultOpts = this.unpackToDefault(oGRP);
        resultOpts = this.extendIncomingToDefault(defaultOpts, oIncomingOpt);
        grpx = this.pack(resultOpts);
        return grpx;
      };

      return GRPX;

    })();
  });

}).call(this);
